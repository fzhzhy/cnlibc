主菜单

此为0.11版本，更新于2006年12月3日。基于2.6版本的GNU C标准库参
考手册。

1 简介
-----

C语言没有内置一些通用功能，例如输入/输出，内存管理，字符串操作等。这些都定义在标准库中，
用户可以将其链接应用程序中。

GNU C库定义了所有ISO C标准所定义的所有库函数和一些POSIX，UNIX的派生系统的特性以及
GNU系统的扩展特性。

此手册的目的就是告诉你如何使用这些GNU库。手册已经详细描述那些特性归属那些标准，
以此来帮助你识别那些对于某些系统不具有可以移植性。但手册中的重点并不严格具有可移植性。

1.1 开始上路
-----------

本手册假设你至少对C语言熟悉并具有基础的编程概念。特别的，熟悉ISO标准C，
而不是其他的“C方言”。

GNU C库包含几个头文件，这些文件提供了相关函数的定义和声明。这些信息为C编译器编译的
时候提供信息。例如，头文件“stdio.h”声明了输入/输出操作的函数集，"string.h"声明了
字符串处理函数集。本文档大体遵从这些头文件的组织方法。


如果你是第一次读这个文档，你应当阅读所有介绍性的材料并浏览其余章节。GNU C库包含了大
量函数，准确记忆每一个函数的使用是不太现实的。更重要的是大体熟悉库函数提供的函数集，
这样当你编写程序的时候，你就可以知道什么时候利用库函数，在手册中的什么地方可以找到更
详尽的相关信息。
1.2 标准和可移植性
----------------

本节讨论GNU C库基于的不同标准和其他来源，包括ISO C，POSIX标准，System V和
Berkeley Unix。

本手册主要关于的是教你如何更有效的使用GNU库函数。不过如果你还关心和这些标准的兼容性
以及在除了GNU系统之外的系统移植性的话，本手册提供有效帮助。本节给出关于这些标准的概览。

1.2.1 ISO C
-----------

GNU C库与ANSI接受的C标准兼容：ANSI C和后来的ISO/IEC 9899:1990。 在这里我们把
ISO C称作标准是由于 ISO C是被认为更广泛接受的标准。GNU库中的头文件和库函数是ISO C
标准的一个超集。 

如果你严格坚持ISO C标准，你应该使用-ansi编译选项来编译你的程序。这个选项告诉编译器
仅仅使用ISO标准的功能，除非的支出需要额外的功能。

使GNU C库能够严格符合ISO C标准的重要性在于，ISO C在库实现能够使用的名称上加了限制，
并且GNU扩展并不满足这些限制。

本手册并不打算在这里详尽描述将ISO C和旧的语言的区别。本手册的主要目的在于提出如何在
那个C语言的实现下写出更好的程序。

1.2.2 可移植操作系统接口
---------------------

GNU库也同样和POSIX兼容。POSIX作为ANSI/IEEE 标准1003发布。POSIX源于各种版本的
UNIX操作系统。

POSIX标准所定义的库函数是ISO C标准的超集；POSIX为ISO C库指定了额外的特性和功能。
总的来说，POSIX标准提供的特性和功能旨在为特定的操作系统环境提供低层次的支持，而不是
为了可以支持各种各样操作系统的通用编程语言。

GNU C 库实现了所有ISO/IEC 9945-1：1996定义的所有函数。其所定义的ISO C库函数的
基本扩函数函数包括了文件系统原语接口，特定设备终端控制函数和进程控制函数。

ISO/IEC 9945-2:1993, POSIX Shell和工具的标准在GNU库中都有实现，包括处对与正则
表达式及其他模式匹配都有支持。

1.2.3 伯克利Unix
--------------------

GNU C库还支持一些非标准化的版本，特别是继承4.2BSD，4.3BSD以及4.4BSD Unix系统
和SunOS。这些系统支持大多数ISO C和POSIX标准，并且4.4BSD和新版本的SunOS事实上完整
支持。

BSD库函数包括符号链接，"select"功能，BSD信号函数集以及sockets

1.2.4 SVID （系统V接口描述）
-----------------------------------------------

SVID是描述AT&T Unix V操作系统的文档，是POSIX标准的扩展集合。

为了和系统V和其他Unix保持兼容，GNU C 库实现了SVID定义而ISO C 和POSIX没有要求的
大多数函数。然而，还是有很多不那么重要并且也不常用的函数没有实现（事实上，系统V也没
有完全实现）。

系统V支持的函数包括进程间通讯和共享内存的方法，hsearch和drand48函数族，fmtmsg
和一些数学函数。

1.2.5 XPG （X/Open 可移植性指导）
----------------------------------------

X/Open 公司发布的X/Open可移植性知道比POSIX是更通用的标准。 X/Open拥有Unix版权并且
XPG规范要求目标机为Unix系统。

GNU C库兼容X/Open 可移植性指导，兼容XSI（X/Open 系统接口）系统的所有扩展并且和所有
X/Open Unix扩展兼容。

在POSIX之上扩展的主要是系统V和BSD系统的功能。其中修订了一些系统V的一些错误。因此让
Unix品牌在商业系统前提条件就是兼容XPG标准。

1.3 使用标准库
------------

本节介绍一些使用标准库的实用方法。

1.3.1 头文件
------------------

库分为两个部分：“头文件”用来定义类型和宏，声明变量和函数；还有真实的库（定义变量
和函数的档案）。
	
回想一下在C语言中，声明只不过提供了函数或者变量存在的信息并给出其类型。对于一个函数
声明来说，其参数类型信息可能也会同时提供。声明的目的就是允许编译器正确的处理对已声明
变量和函数的引用。而定义才真正给一个变量分配空间或者真正描述函数功能。

为了使用库函数提供的功能，使用者必须保证原程序包含了适当的头文件。只有这样编译器
才能知道这些库函数的声明并正确引用他们。一旦你的程序编译完毕，链接器负责解析库文件
中的真实定义。

头文件通过#include预处理指令来包含到程序源文件中。C语言支持两种这样的指令形式：
第一种，#include "HEADER" 通常包含你自己写的头文件；用来包含一些你程序特有的接口
的声明和定义。相对应的，#include <file.h>通常是用来包含标准库的头文件。这个库文件
可能已经被系统管理员安装到一个标准的位置。你应当使用第二种形式来包含标准库的头文件。

通常,#include指令在C文件的顶部，在所有代码之前。如果在源程序的开头放的是注释（好主意），
紧接着应该就是#include指令了。再下来才是一些功能特性测试宏。（参见*特性测试宏*）

更多关于头文件和#include指令的信息，参见*头文件*

GNU C 库提供了不少库文件，每一个文件都包含一组相关功能的类型和宏声明变量和函数声明。
这意味着你可以根据应用程序所需来包含相应头文件。

一些标准库的头文件自动包含了其他库的的头文件。然而，作为一种编程风格，你不应当依赖它；
应当显示的包含所有使用的头文件。GNU C库的头文件已经防止了被偶然重复包含的问题；
重复包含头文件没有影响。同样，如果你的程序需要包含多个头文件，包含的顺序也是没有区别的。

*兼容性注释* 依照任何顺序包含标准库的头文件多少次都可以在任何符合ISO C的实现上正常
工作。然而，在过去的C编译器上去无法工作。

严格的将，你没有必要非得包含所使用函数的声明的头文件；根据本手册的规范，你可以自己显示
的声明。但通常最好还是包含头文件，因为它可能已经定义了一些类型和宏并且定义了一些更加
高效的函数的宏。这也是确定的正确的声明。

1.3.2 函数的宏定义
------------------------------------

在本手册中如果我们称作函数的有可能也是一个宏定义。通常不会影响你程序的运行，宏定义和
函数功能相同。特别的，对于库函数宏相当于检查一次参数而已，就像函数调用一样。使用这些
函数宏定义的主要原因是在行内展开要比真正的函数调用快的多。

尽管被定义为一个宏，它还是要引用库函数地址。这是因为，在此上下文中，函数名称被没有跟
着左括号，这样从句法上就会必然被识别为宏调用。

有时候你也许并不想避免使用函数宏定义-应为它可以使程序更好调试。这里提供两种方法：

	* 为了防止错误使用，可以用括号将宏定义括起来。函数名在被认为是宏调用的句法上下文中将不会出现。
	* 你可以使用#undef预处理指令来整个源文件中隐藏宏定义，除非显示的说明。
举个例子，假设在头文件stdlib.h中声明了函数abs:

